services:
  traefik:
    image: traefik:v3.0
    command:
      - "--providers.docker=true"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/dynamic:/etc/traefik/dynamic:ro"
      - "acme:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgbackups:
    image: prodrigestivill/postgres-backup-local:16
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SCHEDULE=@daily
      - BACKUP_DIR=/backups
      - BACKUP_KEEP_DAYS=7
    volumes:
      - ./backups:/backups
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio:/data
    ports:
      - "9001:9001" # console locale (non exposée via traefik)
    restart: unless-stopped

  api:
    build:
      context: ./backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - MINIO_ENDPOINT=minio
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - PUBLIC_FQDN=${PUBLIC_FQDN}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    labels:
      - "traefik.enable=true"
      # Route HTTPS => /api vers le service API
      - "traefik.http.routers.api.rule=Host(`${PUBLIC_FQDN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=le"
      # Force le port interne si l'image n'expose pas
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      # Strip du préfixe /api avant d'atteindre Nest
      - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=api-strip"
    restart: unless-stopped

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      # ⚠️ Vite lit VITE_API_BASE AU BUILD → on la passe en build-arg
      args:
        VITE_API_BASE: ${VITE_API_BASE:-https://${PUBLIC_FQDN}/api}
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      # Route HTTPS => racine vers le site statique
      - "traefik.http.routers.web.rule=Host(`${PUBLIC_FQDN}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=le"
      # Nginx écoute sur 80 dans le conteneur
      - "traefik.http.services.web.loadbalancer.server.port=80"
    restart: unless-stopped

volumes:
  pgdata:
  acme:
  minio:
