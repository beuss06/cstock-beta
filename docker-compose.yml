services:
  traefik:
    image: traefik:v3.0
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=\
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --log.level=DEBUG
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/dynamic:/etc/traefik/dynamic:ro"
      - "./traefik:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: \
      POSTGRES_PASSWORD: \
      POSTGRES_DB: \
      TZ: Europe/Paris
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \ -d \"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgbackups:
    image: prodrigestivill/postgres-backup-local:16
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=\
      - POSTGRES_USER=\
      - POSTGRES_PASSWORD=\
      - SCHEDULE=@daily
      - BACKUP_DIR=/backups
      - BACKUP_KEEP_DAYS=7
      - TZ=Europe/Paris
    volumes:
      - ./backups:/backups
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=\
      - MINIO_ROOT_PASSWORD=\
      - TZ=Europe/Paris
    volumes:
      - minio:/data
    ports:
      - "127.0.0.1:9001:9001" # limite l'accès à localhost (change si besoin)
    restart: unless-stopped

  api:
    build:
      context: ./backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://\:\@postgres:5432/\?schema=public
      - JWT_SECRET=\
      - MINIO_ENDPOINT=minio
      - MINIO_ACCESS_KEY=\
      - MINIO_SECRET_KEY=\
      - MINIO_BUCKET=\
      - PUBLIC_FQDN=\
      - TZ=Europe/Paris
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    labels:
      - traefik.enable=true
      # HTTPS -> /api
      - traefik.http.routers.api.rule=Host(\) && PathPrefix(/api)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=le
      - traefik.http.services.api.loadbalancer.server.port=3000
      # Retirer /api avant Nest
      - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
      - traefik.http.routers.api.middlewares=api-strip
      # HTTP -> HTTPS
      - traefik.http.routers.api-redirect.rule=Host(\) && PathPrefix(/api)
      - traefik.http.routers.api-redirect.entrypoints=web
      - traefik.http.routers.api-redirect.middlewares=api-redirect
      - traefik.http.middlewares.api-redirect.redirectscheme.scheme=https
    restart: unless-stopped

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: https://\/api
    depends_on:
      - api
    labels:
      - traefik.enable=true
      # HTTPS -> racine
      - traefik.http.routers.web.rule=Host(\)
      - traefik.http.routers.web.entrypoints=websecure
      - traefik.http.routers.web.tls=true
      - traefik.http.routers.web.tls.certresolver=le
      - traefik.http.services.web.loadbalancer.server.port=80
      # HTTP -> HTTPS
      - traefik.http.routers.web-redirect.rule=Host(\)
      - traefik.http.routers.web-redirect.entrypoints=web
      - traefik.http.routers.web-redirect.middlewares=web-redirect
      - traefik.http.middlewares.web-redirect.redirectscheme.scheme=https
    restart: unless-stopped

volumes:
  pgdata:
  minio:
